#/usr/bin/env bash

set -ex
export PYTORCH_BUILD_VERSION=0.4.1
export PYTORCH_BUILD_NUMBER=1

export CMAKE_LIBRARY_PATH="/opt/intel/lib:/lib:$CMAKE_LIBRARY_PATH"
export CMAKE_INCLUDE_PATH="/opt/intel:$CMAKE_INCLUDE_PATH"
export TORCH_NVCC_FLAGS="-Xfatbin -compress-all"
export NCCL_ROOT_DIR=/usr/local/cuda
export TH_BINARY_BUILD=1
export USE_STATIC_CUDNN=1
export USE_STATIC_NCCL=1
export ATEN_STATIC_CUDA=1
export USE_CUDA_STATIC_LINK=1

export TORCH_CUDA_ARCH_LIST="3.5;5.0+PTX"
if [[ $CUDA_VERSION == "8.0" ]]; then
    echo "CUDA 8.0 Detected"
    export TORCH_CUDA_ARCH_LIST="$TORCH_CUDA_ARCH_LIST;6.0;6.1"
elif [[ $CUDA_VERSION == "9.0" ]]; then
    echo "CUDA $CUDA_VERSION Detected"
    export TORCH_CUDA_ARCH_LIST="$TORCH_CUDA_ARCH_LIST;6.0;7.0"
elif [[ $CUDA_VERSION == "9.2" ]]; then
    echo "CUDA $CUDA_VERSION Detected"
    export TORCH_CUDA_ARCH_LIST="$TORCH_CUDA_ARCH_LIST;6.0;6.1;7.0"
fi
echo $TORCH_CUDA_ARCH_LIST

# ########################################################
# # Compile wheels
# #######################################################


python setup.py clean
pip install -r requirements.txt
time python setup.py bdist_wheel

echo ".whl file has been built"
DEPS_LIST=(
	"/usr/local/cuda/lib64/libcudart.so.9.0"
	"/usr/local/cuda/lib64/libnvToolsExt.so.1"
	"/usr/local/cuda/lib64/libnvrtc.so.9.0"
	"/usr/local/cuda/lib64/libnvrtc-builtins.so"
	"/usr/lib/x86_64-linux-gnu/libgomp.so.1"
)

DEPS_SONAME=(
	"libcudart.so.9.0"
	"libnvToolsExt.so.1"
	"libnvrtc.so.9.0"
	"libnvrtc-builtins.so"
	"libgomp.so.1"
)

fname_with_sha256() {
    HASH=$(sha256sum $1 | cut -c1-8)
    DIRNAME=$(dirname $1)
    BASENAME=$(basename $1)
    if [[ $BASENAME == "libnvrtc-builtins.so" ]]; then
	echo $1
    else
	INITNAME=$(echo $BASENAME | cut -f1 -d".")
	ENDNAME=$(echo $BASENAME | cut -f 2- -d".")
	echo "$DIRNAME/$INITNAME-$HASH.$ENDNAME"
    fi
}

make_wheel_record() {
    FPATH=$1
    if echo $FPATH | grep RECORD >/dev/null 2>&1; then
	# if the RECORD file, then
	echo "$FPATH,,"
    else
	HASH=$(openssl dgst -sha256 -binary $FPATH | openssl base64 | sed -e 's/+/-/g' | sed -e 's/\//_/g' | sed -e 's/=//g')
	FSIZE=$(ls -nl $FPATH | awk '{print $5}')
	echo "$FPATH,sha256=$HASH,$FSIZE"
    fi
}


echo "Unzip built wheel"
WHEELHOUSE_DIR='dist/'
cd $WHEELHOUSE_DIR
mkdir tmp
for whl in torch*linux*.whl
	do
	cp $whl "tmp/"$(basename $whl)
	cd tmp
	echo "whl name $whl"
	unzip $(basename $whl)
	break
	done

echo "Copy dependencies"
patched=()
for filepath in "${DEPS_LIST[@]}"
do
	filename=$(basename $filepath)
	destpath=torch/lib/$filename
	echo "destpath is $destpath"
	if [[ "$filepath" != "$destpath" ]]; then
		cp $filepath $destpath
	fi
	patchedpath=$(fname_with_sha256 $destpath)
	patchedname=$(basename $patchedpath)
	if [[ "$destpath" != "$patchedpath" ]]; then
		mv $destpath $patchedpath
	fi
	patched+=("$patchedname")
	echo "Copied $filepath to $patchedpath"
	done
	echo "patching to fix the so names to the hashed names"
	for ((i=0;i<${#DEPS_LIST[@]};++i));
	do
	find torch -name '*.so*' | while read sofile; do
		origname=${DEPS_SONAME[i]}
		patchedname=${patched[i]}
		if [[ "$origname" != "$patchedname" ]]; then
		set +e
		patchelf --print-needed $sofile | grep $origname 2>&1 >/dev/null
		ERRCODE=$?
		set -e
		if [ "$ERRCODE" -eq "0" ]; then
			echo "patching $sofile entry $origname to $patchedname"
			patchelf --replace-needed $origname $patchedname $sofile
		fi
		fi
	done
done

# copy other dependencies to torch/lib
echo "copy other dependencies to torch/lib"
DEPS_OTHERS=(
	"/home/zhoushengkai/code/lib_deps_others/libmkl_core.so"
	"/home/zhoushengkai/code/lib_deps_others/libmkldnn.so.0"
	"/home/zhoushengkai/code/lib_deps_others/libmkl_gnu_thread.so"
	"/home/zhoushengkai/code/lib_deps_others/libmkl_intel_lp64.so"
	"/home/zhoushengkai/code/lib_deps_others/libmklml_intel.so"
)

for filepath in "${DEPS_OTHERS[@]}"
do
    filename=$(basename $filepath)
	destpath=torch/lib/$filename
	echo "destpath is $destpath"
	if [[ "$filepath" != "$destpath" ]]; then
		cp $filepath $destpath
	fi
done


# set RPATH of _C.so and similar to $ORIGIN, $ORIGIN/lib
find torch -maxdepth 1 -type f -name "*.so*" | while read sofile; do
echo "Setting rpath of $sofile to " '$ORIGIN:$ORIGIN/lib'
patchelf --set-rpath '$ORIGIN:$ORIGIN/lib' $sofile
patchelf --print-rpath $sofile
done
# set RPATH of lib/ files to $ORIGIN
find torch/lib -maxdepth 1 -type f -name "*.so*" | while read sofile; do
echo "Setting rpath of $sofile to " '$ORIGIN'
patchelf --set-rpath '$ORIGIN' $sofile
patchelf --print-rpath $sofile
done

# regenerate the RECORD file with new hashes 
record_folder=*.dist-info
record_file=$(echo $record_folder)"/RECORD"
#record_file=`echo $(basename $whl) | sed -e 's/-cp.*$/.dist-info\/RECORD/g'`
echo "Generating new record file $record_file"
rm -f $record_file
# generate records for torch folder
find torch -type f | while read fname; do
echo $(make_wheel_record $fname) >>$record_file
done

# generate records for torch-[version]-dist-info folder
find torch*dist-info -type f | while read fname; do
echo $(make_wheel_record $fname) >>$record_file
done

# zip up the wheel back
zip -rq $(basename $whl) torch*

# replace original wheel
mv $(basename $whl) "../"$whl

# clean temporal files
cd ..
rm -rf tmp
